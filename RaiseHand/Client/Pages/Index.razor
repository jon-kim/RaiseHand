@page "/"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Riase Hand</PageTitle>
<nav class="navbar navbar-expand-lg navbar-light" style="background-color:#edf4ff">
    <div class="container-fluid">
    <h3 class="navbar-brand">Raise Hand</h3>
    </div>
</nav>

@if (!IsConnected)
{
    <main class="my-auto mx-auto">
        <div class="input-group">
            <input @bind="_username" class="form-control" placeholder="What's your name?" @onkeyup="HandleInput" />
            <button class="btn btn-primary form-control-append" @onclick="Connect">Connect</button>
        </div>
    </main>
}
else
{
    <main class="my-auto mx-auto">
        <div class="container">
            @foreach(KeyValuePair<string, bool> hand in _hands)
            {
                <div class="row">
                    <div class="col py-2">
                        @hand.Key
                    </div>
                    <div class="col">
                        <img src="/assets/hand.svg" width="36px" height="36px" />
                    </div>
                </div>
            }
        </div>
    </main>

    <footer class="footer mt-auto py-2" style="background-color:#edf4ff">
        <div class="container">
            <div class="row justify-content-between">
                <div class="col-3">
                    <button type="submit" class="btn btn-outline-light" disabled="@(!IsConnected)" @onclick="ChangeName">Change Name</button>
                </div>

                <div class="col-3">
                    <input class="btn-check" type="checkbox" id="checkBoxHand" @onclick="Send" checked="@_hand" disabled="@(!IsConnected)" />
                    <label class="btn btn-outline-info" for="checkBoxHand"> @(_hand?"Lower":"Riase") Hand</label>
                </div>
            </div>
        </div>
    </footer>
}
@code {
    private HubConnection? _hubConnection;
    private SortedDictionary<string, bool> _hands = new SortedDictionary<string, bool>();
    private string _username = string.Empty;
    private bool _hand = false;

    private async Task Connect()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri($"/raisehandhub?username={_username}")).Build();

        _hubConnection.On<string, bool>("ReceiveHand", (user, hand) =>
        {
            Console.WriteLine("~~~ReceiveHand~~~");

            if (hand)
                _hands[user] = hand;
            else
                _hands.Remove(user);

            StateHasChanged();

        });

        _hubConnection.On<string>("RemoveHand", (user) =>
        {
            _hands.Remove(user);
            StateHasChanged();
        });

        _hubConnection.On<UserHand[]>("ReceiveAllHands", (userHands) =>
        {
            _hands.Clear();

            Console.WriteLine("~~~ReceiveAllHands~~~");

            foreach (UserHand uh in userHands)
            {
                _hands[uh.Username] = uh.HandRaised;
                Console.WriteLine($"{uh.Username}: {uh.HandRaised}");
            }

            Console.WriteLine("###ReceiveAllHands###");

            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (_hubConnection != null)
        {
            _hand = !_hand;
            await _hubConnection.SendAsync("SetHandRaised", _username, _hand);
        }
    }

    private async Task ChangeName()
    {
        if (_hubConnection != null)
        {
            try
            {
                await _hubConnection.StopAsync();
            }
            finally
            {
                await _hubConnection.DisposeAsync();
            }
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Connect();
        }
    }

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
            await _hubConnection.DisposeAsync();
    }
} 